env.environment =""
env.Branch=""
pipeline {

options {
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    disableConcurrentBuilds()
    lock resource: 'shared_resource_lock'
  }
agent any 
triggers {
    cron(${env.GIT_BRANCH} == 'origin/env/stg' ? 'H 11 * * *' : '')
    cron(${env.GIT_BRANCH} == 'origin/env/test' ? 'H 10 * * *' : '')
  }
stages {
        stage('Build') {
		when {
                   anyOf { 
		   branch 'origin/env/stg'; branch 'origin/env/test' ; 
		   }
	           beforeAgent true
		   }
                   steps {
		   echo 'Hello World'
                   script {			    	
                   if ("${env.GIT_BRANCH}" == "origin/env/stg") {
                   env.environment = "STG"
		    } else if("${env.GIT_BRANCH}" == "origin/env/test"){
                   env.environment = "TEST"
		    } else {
                    env.environment = "false"
                   }
		    echo env.environment
			}
			}
}

       stage('Build And Test'){
	 
	            failFast true
                steps{
                    
                    script {
			    
                    try {
			checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '', url: 'git@github.com:agupta89/WellFrontendTest.git']]]
			wrap([$class: 'Xvfb', additionalOptions: '', assignedLabels: '', autoDisplayName: true, debug: false, shutdownWithBuild: true ,displayNameOffset: 1,installationName: 'Xvfb', parallelBuild: true, screen: '1600x1280x24', timeout: 60])
                        sh "mvn -f 'WellFrontendTest/pipelinepom.xml' clean install -Denv=${env.environment} -Dmaven.test.failure.ignore=true" 
                    }
                    catch (exc) {
                        echo 'Testing failed!'
			      sh 'exit 1'
                        currentBuild.result = 'UNSTABLE'
                        
                    }
                }
		     
                   
            }
            }
            
stage('Test Results'){
	            steps{
			    echo env.GIT_BRANCH
			     script {
			     if ("${env.GIT_BRANCH}" == "origin/env/stg") {
                   env.JOB_NAME = "WellFrontendExecution-STG"
                   env.Branch = "env/stg"
                   }
                   else{
                   env.JOB_NAME = "WellFrontendExecution-TEST"
                   env.Branch = "env/test"
                   }
	                echo 'Set Test1'
	            }
	            }
        post {
         always {
            junit '**/target/surefire-reports/junitreports/*.xml'
        }
        success {
            echo "success" 
            
            emailext attachmentsPattern: '',
        body: '''${SCRIPT, template="groovy-html.template"}''',
        mimeType: 'text/html',
        subject: "[Jenkins] ${env.JOB_NAME}-${env.BUILD_NUMBER}",
        to: 'abhishek.gupta@wellcertified.com, gokul@promantus.com',
        replyTo: "abhishek.gupta@wellcertified.com"
        
        }
        unstable(message: "${STAGE_NAME} is unstable") {  
             echo 'This will run only if the run was marked as unstable'
              emailext attachmentsPattern: '',
        body: '''${SCRIPT, template="groovy-html.template"}''',
        mimeType: 'text/html',
        subject: "[Jenkins] ${env.JOB_NAME}-${env.BUILD_NUMBER}",
        to: 'abhishek.gupta@wellcertified.com, gokul@promantus.com',
        replyTo: "abhishek.gupta@wellcertified.com"
        
            
         }  
        failure {
        	echo "failed"
        	 

        }
        cleanup {
        script {
        git branch: env.BRANCH , credentialsId: 'AbhishekGit', url: 'git@github.com:IWBI/IWBI-Nuxt.git'
        }
        }
        aborted {
        script {
        git branch: env.BRANCH , credentialsId: 'AbhishekGit', url: 'git@github.com:IWBI/IWBI-Nuxt.git'
        }
        }
     }
   }
}
}
